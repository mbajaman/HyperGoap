// Fill out your copyright notice in the Description page of Project Settings.


#include "GOAP/GOAPController.h"

AGOAPController::AGOAPController()
{
}

void AGOAPController::BeginPlay()
{
	for (auto i = 0; i < actions.Num(); i++)
	{
		if (actions[i] != NULL)
		{
			FString aux = actions[i].GetDefaultObject()->GetName();
			auxActions.Push(actions[i].GetDefaultObject());
		}
	}

	// Load current world
	for (FState state : currentWorld)
		wsCurrentWorld.addState(state.name, state.value);

	// Load desired world
	for (FState state : desiredWorld)
		wsDesiredWorld.addState(state.name, state.value);

	// Load action's preconditions and effects
	for (UGOAPAction* a : auxActions)
		a->create_Precon_Effects();

	planner = new GOAPPlanner(&wsCurrentWorld, &wsDesiredWorld, auxActions);
	planner->setMaxDepth(maxDepth);

	// Error Messages
	if(auxActions.Num() == 0)
		UE_LOG(LogTemp, Error, TEXT("No actions were loaded!"));

	if(wsCurrentWorld.isEmpty())
		UE_LOG(LogTemp, Error, TEXT("Current world is empty!"));

	if(wsDesiredWorld.isEmpty())
		UE_LOG(LogTemp, Error, TEXT("Desired world is empty!"));

	Super::BeginPlay();
}

void AGOAPController::OnPossess(APawn* pawn)
{
	Super::OnPossess(pawn);
}

void AGOAPController::Tick(float DeltaSeconds)
{
	Super::Tick(DeltaSeconds);
}

bool AGOAPController::executeGOAP()
{
	if (generatePlan())
	{
		if (plan.Num() > 0)
		{
			// Next action to perform
			UGOAPAction* aux = plan[plan.Num() - 1];

			// Performs an action and when it's done, changing current world state
			if (aux->performAction(GetPawn()))
			{
				wsCurrentWorld.joinWorldState(aux->getEffects());
			}

			return true;
		}
	}

	return false;
}

bool AGOAPController::generatePlan()
{
	if (auxActions.Num() > 0 && !wsCurrentWorld.isEmpty() && !wsDesiredWorld.isEmpty())
	{
		plan = planner->generatePlan(GetPawn());

		if (debug && GEngine) debugInfo();

		return true;
	}

	return false;
}

TArray<UGOAPAction*> AGOAPController::getPlan()
{
	return plan;
}

void AGOAPController::setGoal(const TArray<FState>& newGoal)
{
	wsDesiredWorld.cleanStates();
	updateGoal(newGoal);
}

void AGOAPController::updateGoal(const TArray<FState>& states)
{
	for (FState state : states)
		wsDesiredWorld.addState(state.name, state.value);
}

void AGOAPController::setCurrentWorld(const TArray<FState>& newCurrentWorld)
{
	wsCurrentWorld.cleanStates();
	updateCurrentWorld(newCurrentWorld);
}

void AGOAPController::updateCurrentWorld(const TArray<FState>& states)
{
	for (FState state : states)
		wsCurrentWorld.addState(state.name, state.value);
}

TArray<FState> AGOAPController::getCurrentWorldStates()
{
	TArray<FState> worldStates;
	for (auto states : wsCurrentWorld.getStates())
	{
		worldStates.Add({ states.first, states.second });
	}

	return worldStates;
}

TArray<FState> AGOAPController::getDesiredWorldStates()
{
	TArray<FState> worldStates;
	for (auto states : wsDesiredWorld.getStates())
	{
		worldStates.Add({ states.first, states.second });
	}

	return worldStates;
}

void AGOAPController::debugInfo()
{
	FString name = GetPawn()->GetName();
	GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT("Plan generated by: " + name), false);
	if (controller)GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT("controller: " + this->GetName()), false);
	//GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, TEXT("\n"), false);

	for (int i = 0; i < plan.Num(); i++) {
		if (i != 0) GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Orange, TEXT("--->"), false);
		FString action = plan[i]->GetName();
		GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Orange, TEXT("" + action), false);
	}

	GEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Orange, TEXT("\n"), false);
}
